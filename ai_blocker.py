# ai_blocker.py
import pandas as pd
import numpy as np
from tensorflow.keras.models import load_model
import joblib
from models import IPAttackTracker, BlacklistedIP, db
import datetime
import os

# --- C·∫•u h√¨nh ---
# Ch·∫∑n IP sau khi ph√°t hi·ªán s·ªë l·∫ßn t·∫•n c√¥ng b·∫•t th∆∞·ªùng n√†y
ATTACK_THRESHOLD = 5 
# Th·ªùi gian ch·∫∑n IP (t√≠nh b·∫±ng ph√∫t)
BLOCK_DURATION_MINUTES = 60 

MODEL_DIR = 'model'
MODEL_FILE = os.path.join(MODEL_DIR, 'ai_ids_model.h5')
PREPROCESSOR_FILE = os.path.join(MODEL_DIR, 'preprocessor.pkl')

# S·ª≠ d·ª•ng cache ƒë·ªÉ kh√¥ng ph·∫£i load model m·ªói l·∫ßn request
_model = None
_preprocessor = None

def get_model_and_preprocessor():
    """T·∫£i model v√† preprocessor, ch·ªâ t·∫£i l·∫ßn ƒë·∫ßu ti√™n."""
    global _model, _preprocessor
    if _model is None:
        try:
            _model = load_model(MODEL_FILE)
            _preprocessor = joblib.load(PREPROCESSOR_FILE)
            print("‚úÖ AI model v√† preprocessor ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng.")
        except (FileNotFoundError, IOError) as e:
            print(f"‚ö†Ô∏è L·ªói: Kh√¥ng th·ªÉ t·∫£i model ho·∫∑c preprocessor. Ch·ª©c nƒÉng ch·∫∑n t·ª± ƒë·ªông s·∫Ω kh√¥ng ho·∫°t ƒë·ªông. Chi ti·∫øt: {e}")
            _model = "not_found" # ƒê√°nh d·∫•u l√† kh√¥ng t√¨m th·∫•y ƒë·ªÉ kh√¥ng th·ª≠ l·∫°i
    return _model, _preprocessor

def analyze_and_block(log_entry):
    """
    Ph√¢n t√≠ch m·ªôt entry log, c·∫≠p nh·∫≠t b·ªô ƒë·∫øm t·∫•n c√¥ng v√† ch·∫∑n IP n·∫øu c·∫ßn.
    """
    model, preprocessor = get_model_and_preprocessor()
    if model == "not_found":
        return

    # Chu·∫©n b·ªã d·ªØ li·ªáu t·ª´ log ƒë·ªÉ ƒë∆∞a v√†o model
    df = pd.DataFrame([{
        'method': log_entry.method,
        'path': log_entry.path,
        'payload': log_entry.payload or ''
    }])
    df['payload'] = df['payload'].fillna('')
    df['path'] = df['path'].fillna('unknown')
    df['method'] = df['method'].fillna('unknown')
    
    X_processed = preprocessor.transform(df[['method', 'path', 'payload']])
    X_dense = X_processed.toarray()

    # D·ª± ƒëo√°n
    prediction = model.predict(X_dense, verbose=0).flatten()[0]

    # N·∫øu ph√°t hi·ªán b·∫•t th∆∞·ªùng (label=1)
    if prediction > 0.5:
        ip = log_entry.ip
        print(f"üö® AI ph√°t hi·ªán h√†nh vi b·∫•t th∆∞·ªùng t·ª´ IP: {ip}")

        # C·∫≠p nh·∫≠t b·ªô ƒë·∫øm t·∫•n c√¥ng
        tracker = IPAttackTracker.query.filter_by(ip_address=ip).first()
        if not tracker:
            tracker = IPAttackTracker(ip_address=ip, attack_count=1)
            db.session.add(tracker)
        else:
            tracker.attack_count += 1
        
        db.session.commit()

        # Ki·ªÉm tra n·∫øu v∆∞·ª£t ng∆∞·ª°ng
        if tracker.attack_count >= ATTACK_THRESHOLD:
            # Ch·ªâ ch·∫∑n n·∫øu IP ch∆∞a b·ªã ch·∫∑n
            existing_block = BlacklistedIP.query.filter_by(ip_address=ip).first()
            if not existing_block:
                print(f"üö´ V∆Ø·ª¢T NG∆Ø·ª†NG! Ch·∫∑n IP: {ip} trong {BLOCK_DURATION_MINUTES} ph√∫t.")
                expires = datetime.datetime.utcnow() + datetime.timedelta(minutes=BLOCK_DURATION_MINUTES)
                new_blacklist_entry = BlacklistedIP(
                    ip_address=ip,
                    expires_at=expires,
                    reason=f"T·ª± ƒë·ªông ch·∫∑n sau khi ph√°t hi·ªán {tracker.attack_count} h√†nh vi b·∫•t th∆∞·ªùng."
                )
                db.session.add(new_blacklist_entry)
                db.session.commit()